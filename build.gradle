buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.8.+'
    }
}
apply plugin: 'android'

tasks.withType(Compile) {
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.jakewharton:notificationcompat2:1.1.2'
    compile 'com.android.support:support-v4:13.0.+'
    compile 'com.android.support:appcompat-v7:18.0.+'

    compile 'com.google.android.gms:play-services:3.1.+'
    compile 'com.google.android.apps.dashclock:dashclock-api:+'
    compile 'com.vandalsoftware.android:dslv:+'
    compile project(':android-websockets')
    compile files('libs/TestFlightLib.jar')
}

def getRevision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        packageName "com.irccloud.android"
        testPackageName "com.irccloud.android.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    signingConfigs {
        release {
            if(rootProject.file('keystore.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('keystore.properties')))

                storeFile = file(props['storeFile'])
                storePassword = props['storePassword']
                keyAlias = props['keyAlias']
                keyPassword = props['keyPassword']
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            buildConfigField "String", "REVISION", "\"" + getRevision() + "\""
            buildConfigField "String", "BRAND_NAME", "\"\""
            buildConfigField "String", "BRAND_HOST", "\"www.irccloud.com\""
            if(rootProject.file('private.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('private.properties')))
                buildConfigField "String", "GCM_ID", "\"" + props['GCM_ID'] + "\""
                buildConfigField "String", "TF_KEY", "\"" + props['TF_KEY'] + "\""
            } else {
                buildConfigField "String", "GCM_ID", "\"\""
                buildConfigField "String", "TF_KEY", "\"\""
            }
            buildConfigField "String", "SSL_CN", "\"CN=*.irccloud.com,\""
            resValue "string", "IMAGE_SCHEME", "irccloud-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-image"
            resValue "string", "DISMISS_NOTIFICATION", "com.irccloud.android.DISMISS_NOTIFICATION"
        }
        release {
            buildConfigField "String", "REVISION", "\"\""
            buildConfigField "String", "BRAND_NAME", "\"\""
            buildConfigField "String", "BRAND_HOST", "\"www.irccloud.com\""
            if(rootProject.file('private.properties').exists()) {
                def props = new Properties()
                props.load(new FileInputStream(file('private.properties')))
                buildConfigField "String", "GCM_ID", "\"" + props['GCM_ID'] + "\""
                buildConfigField "String", "TF_KEY", "\"" + props['TF_KEY'] + "\""
            } else {
                buildConfigField "String", "GCM_ID", "\"\""
                buildConfigField "String", "TF_KEY", "\"\""
            }
            buildConfigField "String", "SSL_CN", "\"CN=*.irccloud.com,\""
            resValue "string", "IMAGE_SCHEME", "irccloud-image"
            resValue "string", "IMAGE_SCHEME_SECURE", "irccloud-images"
            resValue "string", "DISMISS_NOTIFICATION", "com.irccloud.android.DISMISS_NOTIFICATION"

            if(rootProject.file('keystore.properties').exists()) {
                signingConfig signingConfigs.release
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest {
            java.srcDirs = ['tests/src']
            res.srcDirs = ['tests/res']
            assets.srcDirs = ['tests/assets']
            resources.srcDirs = ['tests/src']
        }
    }
}
